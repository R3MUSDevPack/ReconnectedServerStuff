@model r3mus.ViewModels.IntelViewModel

@{
    Layout = "~/Views/Shared/_MapLayout.cshtml";
    ViewBag.Title = "Intel Map";
}

<div class="row">
    <div class="col-lg-10" style="text-align:right; left: -10vh;">
        <object data="@Model.Map" id="map" type="image/svg+xml" width="95%" height="85%"></object>
    </div>
    <div class="col-lg-2">
        <h4>@ViewBag.Title - @Model.Title</h4>
        <h5>Status: <label id="status" style="color: orangered;">Connecting to Hub</label></h5>
        <h5>Number of Contributors Logging: <label id="loggerCount">0</label></h5>
        <div id="log" style="text-align: left; overflow-y: scroll; min-height: 80vh; height: 80vh; max-height: 80vh; min-width: 25vh;">
            @*<ul id="log"></ul>*@
        </div>
    </div>
</div>
@section scripts {
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>

        var regionName, elements, svgDoc, orig, chat, messages;

        $(window).load(function () {
            $('.jumbotron').attr('style', 'display: none;');
            orig = 'fill: #008000;';
	        LoadSVG();
            try{
                Connect();
            }
            catch (e) { alert(e.message);}
        });

        function Connect() {
            var conn = $.connection;
            chat = $.connection.intelHub;
            messages = new Array();

            chat.client.pingIntel = function (message) {
                if (!messageExists(message, messages)) {
                    try {
                        messages.push(message);
                        //$('#log').prepend('<li>' + message.LogDateTime + '<br />' + message.UserName + '<br /><strong>' + message.Message + '</strong></li>');
                        $('#log').prepend('<h5>' + message.LogDateTime + '<br />' + message.UserName + '<br /><strong>' + message.Message + '</strong></h5>');
                        var splitMsg = message.Message.split(' ');

                        $.each(splitMsg, function (index, value) {
                            if (value.replace(' ', '').length > 0) {
                                Flash(value);
                            }
                        });

                        if ($('#log li').length > 20) {
                            $('#log li:last').remove();
                            messages.shift();
                        }
                    }
                    catch (e) { alert(e.message); }
                }
            };

            chat.client.pingUserCount = function (userCount) {
                $('#loggerCount').text(userCount);
            }

            $.connection.hub.start().done(function () {
                $('#status').text('Connected to Hub');
                $('#status').attr('style', 'color: green;');
                chat.server.sendUserCount();
                chat.server.sendHistory();
            });
        }

        function messageExists(message, messageArray) {
            var result = false;
            for (var i = 0; i < messageArray.length; i++) {
                if(
                    (messageArray[i].LogDateTime == message.LogDateTime)
                    &&
                    (messageArray[i].UserName == message.UserName)
                    &&
                    (messageArray[i].Message == message.Message)
                )
                {
                    result = true;
                }
            }
            return result;
        }

        function LoadSVG () {
	        svgDoc = document.getElementById("map").contentDocument;
	        for(var i = 0; i < $(svgDoc.getElementsByTagName('symbol')).length; i++)
	        {
	            try {
	                var elem1 = $(svgDoc.getElementsByTagName('symbol'))[i];
	                var elem2 = elem1.getElementsByTagName('a')[0];
	                var elem3 = elem2.getElementsByTagName('text')[0];
	                var elem4 = elem3.previousElementSibling;
	                $(elem4).attr('style', orig);
	                $(elem3).text($(elem3).text());
		        }
	            catch (e) {
		        }
	        }
        }

        function GetRegionName() {
	        regionName = svgDoc.getElementById('legend').getElementsByTagName('text')[0].textContent;
        }

        function Flash(sysName){
	        for(var i = 0; i < $(svgDoc.getElementsByTagName('symbol')).length; i++)
	        {
		        try{
		            if ($(svgDoc.getElementsByTagName('symbol'))[i].getElementsByTagName('a')[0].getElementsByTagName('text')[0].textContent == sysName.replace('*', ''))
		            {
			            SetFlashy($(svgDoc.getElementsByTagName('symbol'))[i].getElementsByTagName('a')[0].getElementsByTagName('text')[0].previousElementSibling);
			        }
		        }
	            catch (e) { }
	        }

        }

        function SetFlashy(sys){
	        counter = 0;

	        var interval = setInterval(function(){
		        if(counter < 20)
		        {
			        if(($(sys)).attr('style') != 'fill: #ff0000')
			        {
			            ($(sys)).attr('style', 'fill: #ff0000');
			        }
			        else
			        {
			            ($(sys)).attr('style', 'fill: #ff8080');
			        }
			        ($(sys).next().text($(sys).next().text()))
			        counter++;
		        }
		        else
		        {
		            ($(sys)).attr('style', 'fill: #ff8080');
		            ($(sys).next().text($(sys).next().text()))
			        clearInterval(interval);
			        interval = setTimeout(function(){
				        ($(sys)).attr('style', 'fill: #ff944d');
				        interval = setTimeout(function(){
				            ($(sys)).attr('style', orig);
				            ($(sys).next().text($(sys).next().text()))
				        }, 300000);
			        }, 300000);
		        }
	        }, 1000);
        }

    </script>
}