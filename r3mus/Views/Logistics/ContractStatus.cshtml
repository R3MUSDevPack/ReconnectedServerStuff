@model r3mus.ViewModels.LogisticsContractsViewModel
@using r3mus.Extensions;
@{
    ViewBag.Title = "Contract Status";
}
<h2>‘Hauled By Wolves Inc’ Logistics Rules &amp; Regs</h2>
    <div class="col-md-6">
            <strong>Contract type: </strong>Courier<br />
            <strong>Availability: </strong>Private<br />
            <strong>Name: </strong>Hauled By Wolves Inc<br /><br />
            <strong>Pick up/Drop Off Locations: </strong><br />
            <ul>
                <li>Jita IV - Moon 4 - Caldari Navy Assembly Plant </li>
                <li>3T7-M8 - Amy's Domain</li>
                <li>CCP-US - We Live Here</li>
                <li>BKG-Q2 - A PVPing Frame of Mind</li>
            </ul>
            <strong>Restrictions: Contracts breaching these will be rejected without warning</strong><br />
            <ul>
                <li>No collateral</li>
                <li>Max Size: 328,000 m3</li>
                <li>Days to accept: 14</li>
                <li>Days to complete: 14</li>
                <li>No Illegal Items, Assembled Cargo Containers, or Fitted Ships</li>
            </ul>
            <strong>Cost: </strong>550 isk per m3 (minimum contract fee: 1,000,000 isk to a maximum of 110,000,000 isk)<br />
            <h5>To calculate the reward, enter the size (m3) of your contract here</h5>
            <input type="text" id="volume" onkeyup="calculate()" />&nbsp;<label id="cost">0 isk</label>
        @if (User.Identity.IsAuthenticated)
        {
            <h4>
                If you need help in setting up a contract or have any questions, please ask in the #logistics channel on Slack.
            </h4>
        }
    </div>
    <div class="col-md-6">
        <h3>@Html.LabelFor(f => f.TotalVolumeOutstanding) @Model.TotalVolumeOutstanding.ToString()</h3>
        @foreach (var deliveryPoint in Model.DeliveryPoints)
        {
            <div id="dp_@deliveryPoint.Id" class="delivery-point" data-toggle="modal" data-target="#modal_@deliveryPoint.Id">
                <h4>@Html.LabelFor(f => f.DeliveryPoints.FirstOrDefault().Destination) @Html.DisplayFor(f => deliveryPoint.Destination)</h4>
                <h4>@Html.LabelFor(f => f.DeliveryPoints.FirstOrDefault().TotalVolume) @Html.DisplayFor(f => deliveryPoint.TotalVolume)</h4>
            </div>
            if (User.Identity.IsAuthenticated)
            {
            <div id="modal_@deliveryPoint.Id" class="modal fade" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-body">
                            @foreach (var contract in deliveryPoint.DisplayContracts)
                            {
                                string style;
                                if (contract.Collateral > 0)
                                {
                                    style = "background-color: yellow;";
                                }
                                else if (contract.Status == EveAI.Live.Utility.Contract.ContractStatus.Outstanding)
                                {
                                    style = "background-color: red;";
                                }
                                else if (contract.Status == EveAI.Live.Utility.Contract.ContractStatus.InProgress)
                                {
                                    style = "background-color: orange;";
                                }
                                else
                                {
                                    style = "background-color: lightgreen;";
                                }
                                <div style='@style'>
                                    <div>
                                        <strong>@contract.Status.ToString(): @Html.DisplayFor(c => Model.CharacterInfos.Where(info => info.Key == contract.IssuerID).First().Value.result.characterName) - @contract.Title</strong>
                                        <br />
                                        @contract.Volume m<sup>3</sup>  - @contract.Reward isk (should be @{ var correctReward = Math.Min(Math.Max(contract.Volume * 550, 1000000), 110000000); }@Html.DisplayFor(c => correctReward))
                                    </div>
                                </div>
                                            }
                        </div>
                    </div>
                </div>
            </div>
                                                }
                                            };
    </div> 
<script type="text/javascript">
    function calculate() {
        try {
            if (!isNaN($('#volume').val())) {
                $('#cost').text((Math.min(Math.max(($('#volume').val() * 550), 1000000), 110000000)).toString() + ' isk');
            }
            else {
                $('#cost').text('Error - please check your volume');
            }
        }
        catch (ex) {
            $('#cost').text('Error - please check your volume');
        }
    }
</script>
